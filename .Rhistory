knitr::include_graphics("ThesisDatabase.png")
knitr::include_graphics("ThesisDatabase.png")
library(DBI)
Thesis_database <- dbConnect(RSQLite::SQLite(),
"C:/Users/jaran/Desktop/R/Spr22Classwork/Reproducible Science/Final_Project/SQL_database/Thesis_Database.db")
class(Thesis_database)
dbExecute(Thesis_database, "CREATE TABLE Lion (
lion_id varchar(6) NOT NULL,
sex char(1) CHECK (sex IN ('M', 'F')),
age char(2),
capture_date text,
capture_site varchar(25),
PRIMARY KEY (lion_id));")
library(tidyverse)
library(magrittr)
library(dplyr)
library(purrr)
library(lubridate)
library(amt)
library(elevatr)
library(sf)
library(sp)
Lion <- read_csv("C:/Users/jaran/Desktop/USU_Thesis_Project/Raw_Data/IWS_Lions/FromDave/M280_GPS_Collar31756_20230112141501.csv", locale=locale(encoding="latin1")) %>%
rename_with(~ tolower(gsub("[[:punct:]]", "", .))) %>%
rename_with(~gsub(" ", "",  .))
Lion %<>%
dplyr::select(no, collarid, utcdate, utctime, latitude, longitude, dop, fixtype) %>%
filter(is.na(latitude) == F | is.na(longitude) == F) %>%
mutate(utctime = as.character(utctime))
Lion %<>%
mutate(GMT = as.POSIXct(paste(utcdate, utctime, sep = " "),
tryFormats = c("%m/%d/%Y %I:%M:%S %p",
"%m/%d/%y %H:%M:%S",
"%m/%d/%Y %H:%M:%S"), tz="GMT")) %>%
dplyr::select(-c(utcdate, utctime))
Lion %<>%
mutate(localtime = with_tz(GMT, tz = "Etc/GMT+8")) %>%
mutate(localtime = force_tz(localtime, tzone = "GMT")) %>%
dplyr::select(-c(GMT))
Lion %<>% filter(localtime >= "2021/11/18" & localtime <= "2022/6/28")
head(Lion$dop)
max(Lion$dop)
Lion %<>% filter(dop <= 6)
names(Lion)
head(Lion)
summary(Lion$latitude)
colnames(Lion)
ncol(Lion)
M280 <- saveRDS(Lion, "C:/Users/jaran/Desktop/USU_Thesis_Project/Cleaned_Data/ProcessedData/California/M280.rds")
M280 <- write.csv(Lion, file="C:/Users/jaran/Desktop/USU_Thesis_Project/Cleaned_Data/ProcessedData/California/M280.csv")
library(tidyverse)
library(magrittr)
library(dplyr)
library(purrr)
library(lubridate)
library(amt)
library(elevatr)
library(sf)
library(sp)
lion <- readRDS("C:/Users/jaran/Desktop/USU_Thesis_Project/Cleaned_Data/ProcessedData/California/Dop6/M280.rds")
head(lion)
trk <- lion %>% mk_track(.x = utme,
.y = utmn,
.t = localtime,
id = collarid,
crs = "+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs",
all_cols = TRUE)
trk %<>% track_resample(rate = hours(4), tolerance = minutes(10)) %>%
time_of_day(include.crepuscule = TRUE)
head(trk)
lion <- trk %>% dplyr::select(no, collarid, latitude, longitude, localtime = t_, utme = x_, utmn = y_, dop, fixtype)
head(lion)
M280 <- saveRDS(lion, "C:/Users/jaran/Desktop/USU_Thesis_Project/Cleaned_Data/ProcessedData/ResampledData/California/4hrs/M280.rds")
M280 <- write.csv(lion, file="C:/Users/jaran/Desktop/USU_Thesis_Project/Cleaned_Data/ProcessedData/ResampledData/California/4hrs/M280.csv", row.names = FALSE)
library(bcpa)
library(rgdal)
library(rgeos)
library(maptools)
library(foreach)
library(doParallel)
library(lubridate)
library(ggplot2)
library(dplyr)
library(raster)
source("rASF.R")
library(dplyr)
library(magrittr)
ProssData <- read.csv("C:/Users/jaran/Desktop/USU_Thesis_Project/Cleaned_Data/ProcessedData/ResampledData/California/4hrs/M280.csv")
RemoveClust <- read.csv("C:/Users/jaran/Desktop/USU_Thesis_Project/Cleaned_Data/ProcessedData/ClustersforRemoval/California/M280ClusterRemoval.csv")
RemoveClust <- RemoveClust %>% dplyr::select(no = "PointID")
CleanedData <- anti_join(ProssData, RemoveClust, by = "no")
M280 <- saveRDS(CleanedData, "C:/Users/jaran/Desktop/USU_Thesis_Project/Cleaned_Data/CleanedData/California/Dop6/M2804hrCleaned.rds")
M280 <- write.csv(CleanedData, file="C:/Users/jaran/Desktop/USU_Thesis_Project/Cleaned_Data/CleanedData/California/Dop6/M2804hrCleaned.csv", row.names = F)
library(bookdown)
knitr::include_graphics("ThesisDatabase.png")
knitr::include_graphics("ThesisDatabase.png")
library(tidyverse)
library(magrittr)
library(dplyr)
library(purrr)
library(lubridate)
library(amt)
library(elevatr)
library(sf)
library(sp)
Lion <- read_csv("C:/Users/jaran/Desktop/USU_Thesis_Project/Raw_Data/IWS_Lions/FromDave/M280_GPS_Collar31756_20230112141501.csv", locale=locale(encoding="latin1")) %>%
rename_with(~ tolower(gsub("[[:punct:]]", "", .))) %>%
rename_with(~gsub(" ", "",  .))
Lion %<>%
dplyr::select(no, collarid, utcdate, utctime, latitude, longitude, dop, fixtype) %>%
filter(is.na(latitude) == F | is.na(longitude) == F) %>%
mutate(utctime = as.character(utctime))
Lion %<>%
mutate(GMT = as.POSIXct(paste(utcdate, utctime, sep = " "),
tryFormats = c("%m/%d/%Y %I:%M:%S %p",
"%m/%d/%y %H:%M:%S",
"%m/%d/%Y %H:%M:%S"), tz="GMT")) %>%
dplyr::select(-c(utcdate, utctime))
Lion %<>%
mutate(localtime = with_tz(GMT, tz = "Etc/GMT+8")) %>%
mutate(localtime = force_tz(localtime, tzone = "GMT")) %>%
dplyr::select(-c(GMT))
Lion %<>% filter(localtime >= "2021/11/18" & localtime <= "2022/6/28")
head(Lion$dop)
max(Lion$dop)
Lion %<>% filter(dop <= 6)
Lion %<>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326, na.fail = FALSE, remove = FALSE) %>% # transform to simple feature spatial object
st_transform(32610) %>% # transform to utms in WGS84
mutate(utme = unlist(map(geometry, 1)), utmn = unlist(map(geometry, 2))) %>%
st_drop_geometry()
